		     +--------------------------+
       	       	     |		CS 2042		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

None

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

The process_execute function has an argument called file_name. Here file_name contains,
both the command and arguments. Inside this function, we seprate this file_name string (using strtok_r) so that we 
get the command and arguments. Then use thread_create with the name of that command and
passs the file_name as an argument.
After that start_process will run. In that function we use strtok_r and separate the arguments,
add them to an array.
After that, the argument stack will be created by looping through
the previously said argument array in reverse order.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok_r() is reentrant which means it is thread safe, can be called from multiple threads.
Also, it uses an additional parameter save_ptr.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

1) Unix approach decreases the time spent in the kernal level.
2) In Unix approach, it can be checked for bad arguments before passing them to kernel.
    So, it avoids kernel fail.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

process.h
---------

struct file_desc{
int id;
struct list_elem elem;
struct file* file;
};

This struct is resposnible for keeping file_descriptor per process.

struct process_control_block
{
pid_t pid; // The pid of process
const char* cmdline; 
struct list_elem elem; // element for child_list
struct thread* parent_thread; // the parent thread.
bool waiting; // indicater: parent process is waiting checking this flag.
bool exited; // indicater: the process is done or not

int32_t exitcode; //represents exit_code

struct semaphore sema_init; 
struct semaphore sema_wait; 
};

This struct keeps information about process_control_block. This is important during waiting for child process.

syscall.c
---------
struct lock file_sys_lock; //Lock used for file_descriptor

thread.h
--------
struct list file_list; 
struct list pcb_list; //keeps track of the process_control_blocks o a thread
struct process_control* t_pcb;

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

The open files which are associated with a file descriptor (ile_desc) are only unique to a single process.
The process struct contains file_descriptor which is associated with an open file.
Thus, file_descriptor is unique only within process.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

reading
-------
1) Check whether the given pointers are valid. If they are not, exit with code -1.
2) Acquire the lock (file system lock).
3) If fd (file_descriptor) equlas 0, then release the lock and retrieve inputs from standard input.
4) If fd equlas 1 or 2, release the lock and return -1.
5) Loop through the file_descriptor list until the relevant file to fd is found.
6) If such a file exists, then release lock, call file_read  function and return the output bytes.
7) If such file does not exist, release lock and return -1.

writing
-------
1) Check whether the given pointers are valid. If they are not, exit with code -1.
2) If fd (file_descriptor) equlas 1, use putbuf to print the contents in buffer to the console, return -size.
3) Then, loop through the file_descriptor list to find the relevant file_descriptor of fd.
4) If such file_descriptor is not found, return -1.
5) If such ound, then acquire the lock (file system lock).
6) Then, use file_write to write contents of the buffer to the file.
7) Release the lock and return the number of bytes written to the file.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

In this implementation, when wait is called,
1) Get the pcb_list associated with the current thread.
2) Then, iterate over pcb_list and check whether a child process exists such that process_pid == child_tid.
3) If such child process doesn't exist OR that child process is already waiting OR already exited, return -1.
4) Else, the child process's waiting is set to true and the current process will wait until the child process exits.
5) Once the child process is exited, it will be removed from the pcb_list and exit_code will be returned.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

In this implementation, before using system calls, I validate the pointers.
I have written a function isuser to validate these poniters when accessing
user program memory, so that if an invalid poniter exists, the process will exit
before using any system calls. Also an error code is returned.
When such an error is detected I use thread_exit and it will invoke process_exit()
inside process.c file clearing the allocated resources.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

P calls wait(C) before C exits
------------------------------
If another process is already waiting on C, process_wait will return -1 and P will not wait on C.
Otherwise, P will wait on C. This prevents race conditions.

P calls wait(C) after C exits
------------------------------
Since C is already exited, process_wait will return -1 and P will not wait on C. This prevents race conditions.

P terminates without waiting, before C exits
--------------------------------------------
If P terminates without waiting before C exits, then the parent_thread of process C will be equlaed to null.
This helps to avoid race conditions. And also process_exit handles freeing resources.

P terminates without waiting, after C exits
-------------------------------------------
Nothing special would happen.


---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

In order to access user_memory from kernel, there are put_user and get_user functions.
While accessing user_memory, the address should be below PHYS_BASE. Otherwise, it is an invalid address.
In this case, a page_fault will occur. So I changed the page_fault() function inside exception.c 
to handle invalid address which is easy.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

Advantages
----------
file_desc (file_descriptors) are unique to each open file per process. So this helps in
avoiding race conditions.

Disadvantages
-------------
This way, a single process can only open a single file. So it is unable to open lot of files.
This is an disadvantage in a large process which requires to open. multiple files.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

Did not change.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?